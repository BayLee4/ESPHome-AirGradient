# Airgradient Open Air Outdoor v1.1 presoldered
# 
# @llamagecko, @Hendrik, @spectrumjade, and @ex-nerd from AirGradient forum
# did most of the work for this integration, see the following thread:
# https://forum.airgradient.com/t/outdoor-monitor-esphome-configuration/823
#
# Original AirGradient Firmware: https://github.com/airgradienthq/arduino/blob/master/examples/DIY_OUTDOOR_C3/DIY_OUTDOOR_C3.ino
#

substitutions:
  id: "1"
  devicename: "airgradient-open-air"
  # WARNING: upper_devicename is component of SSID which is limited to 32 characters
  upper_devicename: "AirGradient Open Air"
  # Initial number of hours to delay AQI results
  initial_aqi_delay: "4"

esphome:
  name: "${devicename}-${id}"
  friendly_name: "${upper_devicename} ${id}"
  # Automatically add the mac address to the name
  # so you can use a single firmware for all devices
  # name_add_mac_suffix: true
  platform: esp32
  board: esp32-c3-devkitm-1

# Enable logging
logger:
  baud_rate: 0

# Enable Home Assistant API (API password is deprecated in favor of encryption key)
# https://esphome.io/components/api.html
api:
  encryption:
    key: !secret home_assistant_encryption_key

ota:
  password: !secret ota_password

wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
  reboot_timeout: 15min

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${upper_devicename} Hotspot"
    password: !secret fallback_ssid_password

captive_portal:

# Used to support POST request to send data to AirGradient
# https://esphome.io/components/http_request.html
http_request:

# Creates a simple web server on the node that can be accessed through any browser
# https://esphome.io/components/web_server.html
web_server:
  port: 80
  include_internal: true

# The captive portal is a fallback mechanism for when connecting to the configured WiFi fails.
# https://esphome.io/components/captive_portal.html
captive_portal:

# Create a switch for safe_mode in order to flash the device
# Solution from this thread:
# https://community.home-assistant.io/t/esphome-flashing-over-wifi-does-not-work/357352/1
switch:
  - platform: safe_mode
    name: "Flash Mode (Safe Mode)"
    icon: "mdi:cellphone-arrow-down"

button:
  - platform: restart
    name: "Restart"
    disabled_by_default: true
    id: button_restart

output:
  - platform: gpio
    id: watchdog
    pin: GPIO2

# Reset hardware watchdog every 5 minutes
interval:
  - interval: 5min
    then:
      - output.turn_on: watchdog
      - delay: 20ms
      - output.turn_off: watchdog

  - interval: 5min
    # Send data to AirGradient API server
    # for more details have a look at sendToServer() function:
    # https://www.airgradient.com/open-airgradient/blog/airgradient-diy-pro-instructions/
    then:
      - http_request.post:
          # AirGradient URL with full MAC address in Hex format all lower case
          url: !lambda |-
            return "http://hw.airgradient.com/sensors/airgradient:" + get_mac_address() + "/measures";
          headers:
              Content-Type: application/json
          # "!lambda return to_string(id(pm2).state);" Converts sensor output from double to string
          # Note: can't use the built-in json encoder here because it does not support nested objects.
          body: !lambda |-
            String jsonString;
            StaticJsonDocument<1024> doc;

            doc["wifi"] = id(airgradient_wifi_signal).state;

            doc["pm01"] = to_string(id(pm_1_0).state);
            doc["pm02"] = to_string(id(pm_2_5).state);
            doc["pm10"] = to_string(id(pm_10_0).state);
            doc["pm003_count"] = to_string(id(pm_0_3um).state);
            doc["atmp"] = to_string(id(temperature).state);
            doc["rhum"] = to_string(id(humidity).state);
            doc["boot"] = "1";

            JsonObject channels = doc.createNestedObject("channels");

            JsonObject channels_1 = channels.createNestedObject("1");
            channels_1["pm01"] = to_string(id(pm1_1_0).state);
            channels_1["pm02"] = to_string(id(pm1_2_5).state);
            channels_1["pm10"] = to_string(id(pm1_10_0).state);
            channels_1["pm003_count"] = to_string(id(pm1_0_3um).state);
            channels_1["atmp"] = to_string(id(pm1_temperature).state);
            channels_1["rhum"] = to_string(id(pm1_humidity).state);

            JsonObject channels_2 = channels.createNestedObject("2");
            channels_2["pm01"] = to_string(id(pm2_1_0).state);
            channels_2["pm02"] = to_string(id(pm2_2_5).state);
            channels_2["pm10"] = to_string(id(pm2_10_0).state);
            channels_2["pm003_count"] = to_string(id(pm2_0_3um).state);
            channels_2["atmp"] = to_string(id(pm2_temperature).state);
            channels_2["rhum"] = to_string(id(pm2_humidity).state);

            // Serialize the JSON document into the string
            serializeJson(doc, jsonString);

            // Convert String to std::string
            std::string stdJsonString(jsonString.c_str());

            return stdJsonString;

light:
  - platform: status_led
    name: "Status LED"
    pin: GPIO10

binary_sensor:
  - platform: gpio
    name: "Button"
    pin:
      number: GPIO9
      inverted: true
      mode:
        input: true
        pullup: true
    on_click:
      min_length: 5s
      then:
        - button.press: button_restart

i2c:
  sda: GPIO7 # Pin 21
  scl: GPIO6 # Pin 20
  scan: false

uart:
  - id: uart_pm1
    baud_rate: 9600
    rx_pin: GPIO20 # Pin 30 / RXD0
    tx_pin: GPIO21 # Pin 31 / TXD0
  - id: uart_pm2
    baud_rate: 9600
    rx_pin: GPIO0 # Pin 12
    tx_pin: GPIO1 # Pin 13

text_sensor:
  - platform: template
    name: "${upper_devicename} PM <2.5 AQI Text"
    disabled_by_default: true
    icon: "mdi:weather-windy-variant"
    id: pm_2_5_aqi_text
    update_interval: 1h
    lambda: |-
      auto state = id(pm_2_5_aqi_text).state;
      return {
        state.length() > 0 ? state : "Delay ${initial_aqi_delay}h"
      };
    on_value:
      lambda: |-
        // copy higher value to combined AQI
        if (id(pm_2_5_aqi).state >= id(pm_10_0_aqi).state) {
          id(aqi_text).publish_state(x);
        }
  - platform: template
    name: "${upper_devicename} PM <10 AQI Text"
    disabled_by_default: true
    icon: "mdi:weather-windy-variant"
    id: pm_10_0_aqi_text
    update_interval: 1h
    lambda: |-
      auto state = id(pm_10_0_aqi_text).state;
      return {
        state.length() > 0 ? state : "Delay ${initial_aqi_delay}h"
      };
    on_value:
      lambda: |-
        // copy higher value to combined AQI
        if (id(pm_10_0_aqi).state >= id(pm_2_5_aqi).state) {
          id(aqi_text).publish_state(x);
        }
  - platform: template
    name: "${upper_devicename} AQI Text"
    icon: "mdi:weather-windy-variant"
    id: aqi_text
    update_interval: 1h
    lambda: |-
      auto state = id(aqi_text).state;
      return {
        state.length() > 0 ? state : "Delay ${initial_aqi_delay}h"
      };

sensor:
  - platform: pmsx003
    type: PMS5003T
    uart_id: uart_pm1
    update_interval: 3min # Sensor will go into sleep mode for extended operation lifetime
    pm_1_0:
      id: pm1_1_0
      name: "${upper_devicename} Particulate Matter <1.0µm Concentration (1)"
      disabled_by_default: true
    pm_2_5:
      id: pm1_2_5
      name: "${upper_devicename} Particulate Matter <2.5µm Concentration (1)"
      disabled_by_default: true
    pm_10_0:
      id: pm1_10_0
      name: "${upper_devicename} Particulate Matter <10.0µm Concentration (1)"
      disabled_by_default: true
    pm_0_3um:
      id: pm1_0_3um
      name: "${upper_devicename} Particulate Matter >0.3µm Count (1)"
      disabled_by_default: true
    pm_0_5um:
      id: pm1_0_5um
      name: "${upper_devicename} Particulate Matter >0.5µm Count (1)"
      disabled_by_default: true
    pm_1_0um:
      id: pm1_1_0um
      name: "${upper_devicename} Particulate Matter >1.0µm Count (1)"
      disabled_by_default: true
    pm_2_5um:
      id: pm1_2_5um
      name: "${upper_devicename} Particulate Matter >2.5µm Count (1)"
      disabled_by_default: true
    temperature:
      id: pm1_temperature
      name: "${upper_devicename} Temperature (1)"
      disabled_by_default: true
    humidity:
      id: pm1_humidity
      accuracy_decimals: 1
      name: "${upper_devicename} Relative Humidity (1)"
      disabled_by_default: true

  - platform: pmsx003
    type: PMS5003T
    uart_id: uart_pm2
    update_interval: 3min # Sensor will go into sleep mode for extended operation lifetime
    pm_1_0:
      id: pm2_1_0
      name: "${upper_devicename} Particulate Matter <1.0µm Concentration (2)"
      disabled_by_default: true
    pm_2_5:
      id: pm2_2_5
      name: "${upper_devicename} Particulate Matter <2.5µm Concentration (2)"
      disabled_by_default: true
    pm_10_0:
      id: pm2_10_0
      name: "${upper_devicename} Particulate Matter <10.0µm Concentration (2)"
      disabled_by_default: true
    pm_0_3um:
      id: pm2_0_3um
      name: "${upper_devicename} Particulate Matter >0.3µm Count (2)"
      disabled_by_default: true
    pm_0_5um:
      id: pm2_0_5um
      name: "${upper_devicename} Particulate Matter >0.5µm Count (2)"
      disabled_by_default: true
    pm_1_0um:
      id: pm2_1_0um
      name: "${upper_devicename} Particulate Matter >1.0µm Count (2)"
      disabled_by_default: true
    pm_2_5um:
      id: pm2_2_5um
      name: "${upper_devicename} Particulate Matter >2.5µm Count (2)"
      disabled_by_default: true
    temperature:
      id: pm2_temperature
      name: "${upper_devicename} Temperature (2)"
      disabled_by_default: true
    humidity:
      id: pm2_humidity
      accuracy_decimals: 1
      name: "${upper_devicename} Relative Humidity (2)"
      disabled_by_default: true

  # Calculate the average sensor values
  - platform: template
    id: temperature
    name: "${upper_devicename} Temperature"
    icon: mdi:thermometer
    device_class: temperature
    accuracy_decimals: 1
    unit_of_measurement: "°C"
    lambda: return (id(pm1_temperature).state + id(pm2_temperature).state) / 2;
  - platform: template
    id: humidity
    name: "${upper_devicename} Relative Humidity"
    icon: mdi:water-percent
    device_class: humidity
    accuracy_decimals: 1
    unit_of_measurement: "%"
    lambda: return (id(pm1_humidity).state + id(pm2_humidity).state) / 2;
  - platform: template
    id: pm_1_0
    name: "${upper_devicename} Particulate Matter <1.0µm Concentration"
    icon: mdi:chemical-weapon
    device_class: pm1
    accuracy_decimals: 0
    unit_of_measurement: µg/m³
    lambda: return (id(pm1_1_0).state + id(pm2_1_0).state) / 2;
  - platform: template
    id: pm_2_5
    name: "${upper_devicename} Particulate Matter <2.5µm Concentration"
    icon: mdi:chemical-weapon
    device_class: pm25
    accuracy_decimals: 0
    unit_of_measurement: µg/m³
    lambda: return (id(pm1_2_5).state + id(pm2_2_5).state) / 2;
  - platform: template
    id: pm_10_0
    name: "${upper_devicename} Particulate Matter <10.0µm Concentration"
    icon: mdi:chemical-weapon
    device_class: pm10
    accuracy_decimals: 0
    unit_of_measurement: µg/m³
    lambda: return (id(pm1_10_0).state + id(pm2_10_0).state) / 2;
  - platform: template
    id: pm_0_3um
    name: "${upper_devicename} Particulate Matter >0.3µm Count"
    icon: mdi:blur
    accuracy_decimals: 0
    unit_of_measurement: /dL
    lambda: return (id(pm1_0_3um).state + id(pm2_0_3um).state) / 2;
  - platform: template
    id: pm_0_5um
    name: "${upper_devicename} Particulate Matter >0.5µm Count"
    icon: mdi:blur
    accuracy_decimals: 0
    unit_of_measurement: /dL
    lambda: return (id(pm1_0_5um).state + id(pm2_0_5um).state) / 2;
  - platform: template
    id: pm_1_0um
    name: "${upper_devicename} Particulate Matter >1.0µm Count"
    icon: mdi:blur
    accuracy_decimals: 0
    unit_of_measurement: /dL
    lambda: return (id(pm1_1_0um).state + id(pm2_1_0um).state) / 2;
  - platform: template
    id: pm_2_5um
    name: "${upper_devicename} Particulate Matter >2.5µm Count"
    icon: mdi:blur
    accuracy_decimals: 0
    unit_of_measurement: /dL
    lambda: return (id(pm1_2_5um).state + id(pm2_2_5um).state) / 2;

  # https://forum.airgradient.com/t/on-device-pm2-5-to-aqi-conversion-with-esphome/750/4
  - platform: copy
    source_id: pm_2_5
    id: pm_2_5_24h
    name: "${upper_devicename} PM <2.5µm Average 24h"
    disabled_by_default: true
    device_class: pm25
    accuracy_decimals: 0
    filters:
    - sliding_window_moving_average:
        window_size: 480 #every 3 minutes for 24 hours
        send_every: 20 #hourly
        send_first_at: 20
    on_value:
      lambda: |-
        static int delay_hours = $initial_aqi_delay;
        if (delay_hours < 1) {
          int aqi = 0;
          int pm25 = id(pm_2_5_24h).state;
          // https://en.wikipedia.org/wiki/Air_quality_index#Computing_the_AQI
          if (pm25 < 12.0) {
            aqi = (50.0 - 0.0) / (12.0 - 0.0) * (pm25 - 0.0) + 0.0;
          } else if (pm25 < 35.4) {
            aqi = (100.0 - 51.0) / (35.4 - 12.1) * (pm25 - 12.1) + 51.0;
          } else if (pm25 < 55.4) {
            aqi = (150.0 - 101.0) / (55.4 - 35.5) * (pm25 - 35.5) + 101.0;
          } else if (pm25 < 150.4) {
            aqi = (200.0 - 151.0) / (150.4 - 55.5) * (pm25 - 55.5) + 151.0;
          } else if (pm25 < 250.4) {
            aqi = (300.0 - 201.0) / (250.4 - 150.5) * (pm25 - 150.5) + 201.0;
          } else if (pm25 < 350.4) {
            aqi = (400.0 - 301.0) / (350.4 - 250.5) * (pm25 - 250.5) + 301.0;
          } else if (pm25 < 500.4) {
            aqi = (500.0 - 401.0) / (500.4 - 350.5) * (pm25 - 350.5) + 401.0;
          } else {
            // everything higher is just counted as 500
            aqi = 500;
          }
          id(pm_2_5_aqi).publish_state(aqi);
        } else {
          delay_hours--;
          id(pm_2_5_aqi_text).publish_state("Delay " + to_string(delay_hours) + "h");
        }

  - platform: template
    name: "${upper_devicename} PM <2.5 AQI"
    disabled_by_default: true
    device_class: aqi
    icon: "mdi:weather-windy-variant"
    accuracy_decimals: 0
    id: pm_2_5_aqi
    on_value:
      lambda: |-
        if (x <= 50.0) {
          id(pm_2_5_aqi_text).publish_state("Good");
        } else if (x <= 100.0) {
          id(pm_2_5_aqi_text).publish_state("Moderate");
        } else if (x <= 150.0) {
          id(pm_2_5_aqi_text).publish_state("Unhealthy for Sensitive Groups");
        } else if (x <= 200.0) {
          id(pm_2_5_aqi_text).publish_state("Unhealthy");
        } else if (x <= 300.0) {
          id(pm_2_5_aqi_text).publish_state("Very Unhealthy");
        } else if (x <= 400.0) {
          id(pm_2_5_aqi_text).publish_state("Hazardous");
        } else if (x <= 500.0) {
          id(pm_2_5_aqi_text).publish_state("Hazardous"); // again
        } else {
          id(pm_2_5_aqi_text).publish_state("Hazardous"); // and again
        }
        id(aqi).publish_state(std::max(x, id(pm_10_0_aqi).state));

  - platform: copy
    source_id: pm_10_0
    id: pm_10_0_24h
    name: "${upper_devicename} PM <10µm Average 24h"
    disabled_by_default: true
    device_class: pm10
    accuracy_decimals: 0
    filters:
    - sliding_window_moving_average:
        window_size: 480 #every 3 minutes for 24 hours
        send_every: 20 #hourly
        send_first_at: 20
    on_value:
      lambda: |-
        static int delay_hours = $initial_aqi_delay;
        if (delay_hours < 1) {
          int aqi = 0;
          int pm10 = id(pm_10_0_24h).state;
          // https://en.wikipedia.org/wiki/Air_quality_index#Computing_the_AQI
          if (pm10 < 54.0) {
            aqi = (50.0 - 0.0) / (54.0 - 0.0) * (pm10 - 0.0) + 0.0;
          } else if (pm10 < 154.0) {
            aqi = (100.0 - 51.0) / (154.0 - 55.0) * (pm10 - 55.0) + 51.0;
          } else if (pm10 < 254.0) {
            aqi = (150.0 - 101.0) / (254.0 - 155.0) * (pm10 - 155.0) + 101.0;
          } else if (pm10 < 354.0) {
            aqi = (200.0 - 151.0) / (354.0 - 255.0) * (pm10 - 255.0) + 151.0;
          } else if (pm10 < 424.0) {
            aqi = (300.0 - 201.0) / (424.0 - 355.0) * (pm10 - 355.0) + 201.0;
          } else if (pm10 < 504.0) {
            aqi = aqi = (400.0 - 301.0) / (504.0 - 425.0) * (pm10 - 425.0) + 301.0;
          } else if (pm10 < 604) {
            aqi = (500.0 - 401.0) / (604.0 - 505.0) * (pm10 - 505.0) + 401.0;
          } else {
            // everything higher is just counted as 500
            aqi = 500.0;
          }
          id(pm_10_0_aqi).publish_state(aqi);
        } else {
          delay_hours--;
          id(pm_10_0_aqi_text).publish_state("Delay " + to_string(delay_hours) + "h");
        }

  - platform: template
    name: "${upper_devicename} PM <10 AQI"
    disabled_by_default: true
    device_class: aqi
    icon: "mdi:weather-windy-variant"
    accuracy_decimals: 0
    id: pm_10_0_aqi
    on_value:
      lambda: |-
        if (x <= 50.0) {
          id(pm_10_0_aqi_text).publish_state("Good");
        } else if (x <= 100.0) {
          id(pm_10_0_aqi_text).publish_state("Moderate");
        } else if (x <= 150.0) {
          id(pm_10_0_aqi_text).publish_state("Unhealthy for Sensitive Groups");
        } else if (x <= 200.0) {
          id(pm_10_0_aqi_text).publish_state("Unhealthy");
        } else if (x <= 300.0) {
          id(pm_10_0_aqi_text).publish_state("Very Unhealthy");
        } else if (x <= 400.0) {
          id(pm_10_0_aqi_text).publish_state("Hazardous");
        } else if (x <= 500.0) {
          id(pm_10_0_aqi_text).publish_state("Hazardous"); // again
        } else {
          id(pm_10_0_aqi_text).publish_state("Hazardous"); // and again
        }
        id(aqi).publish_state(std::max(id(pm_2_5_aqi).state, x));

  - platform: template
    name: "${upper_devicename} AQI"
    device_class: aqi
    icon: "mdi:weather-windy-variant"
    accuracy_decimals: 0
    id: aqi

  - platform: wifi_signal
    name: "Wifi Strength"
    id: airgradient_wifi_signal
    update_interval: 60s

  - platform: uptime
    name: "Uptime Sensor"
    id: uptime_sensor
    update_interval: 60s
